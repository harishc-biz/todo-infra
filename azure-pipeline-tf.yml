trigger:
- main

pool:
  vmImage: 'ubuntu-20.04'

steps:

- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV4@4
  displayName: 'terraform init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-var-file ./environments/dev/terraform.tfvars'
    backendAzureRmUseEnvironmentVariablesForAuthentication: false
    backendServiceArm: 'harish(7988383d-5947-4e42-bede-64c7eb8aa983)'
    backendAzureRmResourceGroupName: 'todo-app'
    backendAzureRmStorageAccountName: 'tododevtf'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'terraform.tfstate'


- task: TerraformTaskV4@4
  displayName: 'terraform plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-var-file environments/dev/terraform.tfvars'
    environmentServiceNameAzureRM: 'harish(7988383d-5947-4e42-bede-64c7eb8aa983)'

- task: TerraformTaskV4@4
  displayName: 'terraform apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-var-file environments/dev/terraform.tfvars -auto-approve'
    environmentServiceNameAzureRM: 'harish(7988383d-5947-4e42-bede-64c7eb8aa983)'

# - task: TerraformTaskV4@4
#   displayName: 'terraform destroy'
#   inputs:
#     provider: 'azurerm'
#     command: 'destroy'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#     commandOptions: '-var-file environments/dev/terraform.tfvars -auto-approve'
#     environmentServiceNameAzureRM: 'harish(7988383d-5947-4e42-bede-64c7eb8aa983)' 